detected=intersect(top10,sim_results$snp_position)
falsePositive=setdiff(top10, sim_results$snp_position)
sim_results$snp_position
detected
length(detected)
falsePositive
# Putting all together in the function named pheno_sim
pheno_sim_beta = function(myGD, n_qtn, h2){
X=myGD[,-1]
n=nrow(X)
m=ncol(X)
sampling_pos=sample(m,n_qtn,replace=F)
SNP_10=as.matrix(X[,sampling_pos])
addeffect=rbeta(n_qtn,1,5)
genetic_effect=SNP_10%*%addeffect
genetic_var=var(genetic_effect)
residual_var=(genetic_var-h2*genetic_var)/h2 #residual variance
residual=rnorm(n,mean = 0, sd = sqrt(residual_var))
pheno = genetic_effect + residual
return(list(genetic = genetic_effect,residual = residual,
phenotye = pheno, snp_position = sampling_pos))}
myGD = myGD
n_qtn = 10
h2 = 0.75
set.seed(1) # set seed for reproducible results
sim_results = pheno_sim_beta(myGD, n_qtn, h2)
a = ggplot()+
geom_histogram(aes(sim_results$genetic), fill = 'steelblue',
color = 'black')+
ggtitle('Genetic effect')+xlab('Genetic effect')
b = ggplot()+
geom_histogram(aes(sim_results$residual), fill = 'steelblue',
color = 'black')+
ggtitle('Residual effect')+xlab('Residual effect')
c = ggplot()+
geom_histogram(aes(sim_results$phenotye), fill = 'steelblue',
color = 'black')+
ggtitle('Phenotye')+xlab('Phenotype')
grid.arrange(a,b,c, nrow = 1)
ggplot()+
geom_density(aes(x = sim_results$genetic), color = 'red')+ xlab('Effect')+
ylab('Density')+
geom_density(aes(x = sim_results$residual), color = 'blue')+
geom_density(aes(x = sim_results$phenotye), color = 'black')+
annotate("text", 4,0.8,label= "residual",col="blue")+
annotate("text", 4,0.85,label= "genetic",col="red")+
annotate("text", 4,0.9,label= "phenotype",col="black")
plot(t(-log10(p))~seq(1:m),col=color.vector[myGM[,2]])
abline(v=sim_results$snp_position, lty = 2, lwd=2, col = "black")
abline(v= falsePositive, lty = 2, lwd=2, col = "red")
sortp<-p[mySim$QTN.position]         ##sorting the p-value of 10 SNPs
sortp<-p[sim_results$snp_position]         ##sorting the p-value of 10 SNPs
p_order<-sort(sortp)[7] ##taking the 7th p-value of top 10 SNPs
lessthan7<-length(p[p<p_order])  ##SNPs with p-value less than the 7th significant SNP
lessthan7
plot_effect = function(x){
a = ggplot()+
geom_point(aes(x = 1:400, y = x))+
xlab('Index')+ylab('Vaule')
b = ggplot()+
geom_histogram(aes(x), fill = 'steelblue', color = 'black')+xlab('Effect')
c = ggplot(aes(x)) +
stat_ecdf(geom = "line", color = 'tomato', size = 0.8)+
xlab("Effect") + ylab("Cumulative Probability")
d = grid.arrange(a,b,c, nrow = 1)
return(d)}
plot_effect(sim_results$genetic)
plot_effect = function(x){
a = ggplot()+
geom_point(aes(x = 1:400, y = x))+
xlab('Index')+ylab('Vaule')
b = ggplot()+
geom_histogram(aes(x), fill = 'steelblue', color = 'black')+xlab('Effect')
c = ggplot() +
stat_ecdf(aes(x), geom = "line", color = 'tomato', size = 0.8)+
xlab("Effect") + ylab("Cumulative Probability")
d = grid.arrange(a,b,c, nrow = 1)
return(d)}
plot_effect(sim_results$genetic)
#define a function to produce plots
plot_effect = function(x){
#scatter plot
a = ggplot()+
geom_point(aes(x = 1:400, y = x))+
xlab('Index')+ylab('Vaule')
#histogram
b = ggplot()+
geom_histogram(aes(x), fill = 'steelblue', color = 'black')+xlab('Effect')
#cdf
c = ggplot() +
stat_ecdf(aes(x), geom = "line", color = 'tomato', size = 0.8)+
xlab("Effect") + ylab("Cumulative Probability")
d = grid.arrange(a,b,c, nrow = 1)
return(d)}
GWASbyCor(X,y)
p = GWASbyCor(X,y)
color.vector <- rep(c("deepskyblue","orange","forestgreen","indianred3"),10)
m=ncol(X)
plot(t(-log10(p))~seq(1:m),col=color.vector[myGM[,2]])
abline(v=sim_results$snp_position, lty = 2, lwd=1.5, col = "black")
sort(-log10(p))[1:5]
index=order(p)
top10=index[1:10]
top10
detected=intersect(top10,sim_results$snp_position)
falsePositive=setdiff(top10, sim_results$snp_position)
sim_results$snp_position
detected
length(detected)
falsePositive
color.vector <- rep(c("deepskyblue","orange","forestgreen","indianred3"),10)
m=ncol(X)
plot(t(-log10(p))~seq(1:m),col=color.vector[myGM[,2]])
abline(v=sim_results$snp_position, lty = 2, lwd=1.5, col = "black")
sort(-log10(p))[1:5]
y = sim_results$phenotye[,1]
X = myGD[-1]
r=cor(y,X)
n=nrow(X)
t=r/sqrt((1-r^2)/(n-2))
p=2*(1-pt(abs(t),n-2))
#p = GWASbyCor(X,y)
color.vector <- rep(c("deepskyblue","orange","forestgreen","indianred3"),10)
m=ncol(X)
plot(t(-log10(p))~seq(1:m),col=color.vector[myGM[,2]])
abline(v=sim_results$snp_position, lty = 2, lwd=1.5, col = "black")
sort(-log10(p))[1:5]
knitr::opts_chunk$set(echo = TRUE)
# read SNPs data file
myGD=read.table(file="geno_numeric.txt", head=T, check.names = FALSE)
# Marker postion
myGM=read.table(file="snp_info.txt", head=T, check.names = F)
dim(myGM)
dim(myGD)
# read SNPs data file
myGD=read.table(file="geno_numeric.txt", head=T, check.names = FALSE)
# Marker postion
myGM=read.table(file="snp_info.txt", head=T, check.names = F)
dim(myGM)
dim(myGD)
#source codes and packages
source("http://zzlab.net/StaGen/2023/R/G2P.R")
source("http://zzlab.net/GAPIT/gapit_functions.txt")
# read SNPs data file
myGD=read.table(file="geno_numeric.txt", head=T, check.names = FALSE)
# Marker postion
myGM=read.table(file="snp_info.txt", head=T, check.names = F)
dim(myGM)
dim(myGD)
# matrix with markers only
X=myGD[,-1]
myGD = myGD
h2 = 0.75
alpha = 1
NQTN = 25
mySim=G2P(myGD, h2, alpha, NQTN, distribution = 'norm')
str(mySim)
var(mySim$addeffect)
# matrix with markers only
X=myGD[,-1]
myGD = myGD
h2 = 0.75
alpha = 1
NQTN = 25
mySim=G2P(myGD[-1], h2, alpha, NQTN, distribution = 'norm')
str(mySim)
var(mySim$addeffect)
# matrix with markers only
X=myGD[,-1]
myGD = myGD
h2 = 0.75
alpha = 1
NQTN = 25
mySim=G2P(myGD[-1], h2, alpha, NQTN, distribution = 'norm')
str(mySim)
var(mySim$addeffect)
# matrix with markers only
X=myGD[,-1]
h2 = 0.75
alpha = 1
NQTN = 20
mySim=G2P(X, h2, alpha, NQTN,'norm')
str(mySim)
var(mySim$addeffect)
#source codes and packages
source("https://zzlab.net/StaGen/2023/R/G2P.R")
source("http://zzlab.net/GAPIT/gapit_functions.txt")
# read SNPs data file
myGD=read.table(file="geno_numeric.txt", head=T, check.names = FALSE)
# Marker postion
myGM=read.table(file="snp_info.txt", head=T, check.names = F)
dim(myGM)
dim(myGD)
# matrix with markers only
X=myGD[,-1]
h2 = 0.75
alpha = 1
NQTN = 20
mySim=G2P(X, h2, alpha, NQTN,'norm')
str(mySim)
var(mySim$addeffect)
# matrix with markers only
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
str(mySim)
var(mySim$addeffect)
mySim=G2P(X, 0.75, 1, 10, "norm")
str(mySim)
var(mySim$addeffect)
mySim$QTN.position
# matrix with markers only
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
str(mySim)
var(mySim$addeffect)
mySim$QTN.position
var(mySim$residual)
var(mySim$residual)
var(mySim$y)
var(mySim$residual)
var(mySim$y)
# matrix with markers only
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
str(mySim)
var(mySim$residual)
var(mySim$y)
mySim$QTN.position
# matrix with markers only
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
str(mySim)
var(mySim$residual)
var(mySim$y)
mySim$QTN.position
# matrix with markers only
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
str(mySim)
var(mySim$residual)
var(mySim$y)
mySim$QTN.position
var(mySim$add)
# Simulate phenotype
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
# Simulate phenotype
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
# Simulate phenotype
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
# Simulate phenotype
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
# Simulate phenotype
set.seed(12345)
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
# Simulate phenotype
set.seed(12345)
X=myGD[,-1]
mySim=G2P(X, 0.75, 1, 10, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
# Simulate phenotype
set.seed(12345)
X=myGD[,-1]
NQTN = 10
h2 = 0.75
mySim=G2P(X, h2, 1, NQTN, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
# Simulate phenotype
set.seed(12345)
X=myGD[,-1]
NQTN = 10
h2 = 0.75
mySim=G2P(X, h2, 1, NQTN, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
# Simulate phenotype
set.seed(12345)
X=myGD[,-1]
NQTN = 10
h2 = 0.75
mySim=G2P(X, h2, 1, NQTN, "norm")
var(mySim$add)
var(mySim$residual)
var(mySim$y)
genetic = mySim$add
residual = mySim$residual
y = mySim$y
GLM_func
G=myGD[,-1]
n=nrow(G)
m=ncol(G)
P=matrix(NA,1,m)
for (i in 1:m){
x=G[,i]
if(max(x)==min(x)){
p=1}else{
X=cbind(1, PCA$x[,1:3],x)
LHS=t(X)%*%X
C=solve(LHS)
RHS=t(X)%*%y
b=C%*%RHS
yb=X%*%b
e=y-yb
n=length(y)
ve=sum(e^2)/(n-1)
vt=C*ve
t=b/sqrt(diag(vt))
p=2*(1-pt(abs(t),n-2))
} #end of testing variation
P[i]=p[length(p)]
} #end of looping for markers
myGAPIT=GAPIT(Y=y,GD=GD,GM=GM,PCA.total=3,
QTN.position=mySim$QTN.position,
model=c("GLM"))
myGAPIT=GAPIT(Y=mySim$y,GD=GD,GM=GM,PCA.total=3,
QTN.position=mySim$QTN.position,
model=c("GLM"))
myGAPIT=GAPIT(Y=mySim$y,myGD=GD,GM=myGM,PCA.total=3,
QTN.position=mySim$QTN.position,
model=c("GLM"))
myGAPIT=GAPIT(Y=mySim$y,GD=myGD,GM=myGM,PCA.total=3,
QTN.position=mySim$QTN.position,
model=c("GLM"))
knitr::opts_chunk$set(echo = TRUE)
source("http://zzlab.net/GAPIT/gapit_functions.txt")
#Import demo data
myGD=read.table(file="http://zzlab.net/GAPIT/data/mdp_numeric.txt",head=T)
myGM=read.table(file="http://zzlab.net/GAPIT/data/mdp_SNP_information.txt",head=T)
#setwd("C:/Users/theox/Desktop/Spring-2023/Crop_Sci 545/Lab/lab_files")
#Simultate 10 QTN on the first half chromosomes
index1to5=myGM[,2]<6
set.seed(99164)
mySim=GAPIT.Phenotype.Simulation(GD=myGD[,c(TRUE,index1to5)],GM=myGM[index1to5,],h2=.7,NQTN=40, effectunit =.95,QTNDist="normal")
mySim$Y
y = cbind(myGD[1],mySim$y)
myGD[1]
mySim$y
mySim=G2P(X, h2, 1, NQTN, "norm")
mySim$y
y = cbind(myGD[1],mySim$y)
# read SNPs data file
myGD=read.table(file="geno_numeric.txt", head=T, check.names = FALSE)
# Marker postion
myGM=read.table(file="snp_info.txt", head=T, check.names = F)
dim(myGM)
dim(myGD)
# Simulate phenotype
set.seed(12345)
X=myGD[,-1]
NQTN = 10
h2 = 0.75
mySim=G2P(X, h2, 1, NQTN, "norm")
#var(mySim$add)
#var(mySim$residual)
#var(mySim$y)
genetic = mySim$add
residual = mySim$residual
y = cbind(myGD[1],mySim$y)
dim(y)
head(y)
myGAPIT=GAPIT(Y=y,GD=myGD,GM=myGM,PCA.total=3,
QTN.position=mySim$QTN.position,
model=c("GLM"))
myGAPIT$GWAS$P.value
sort(myGAPIT$GWAS$`Position `)[mySim$QTN.position]
(myGAPIT$GWAS$`Position `)[mySim$QTN.position]
sort((myGAPIT$GWAS$`Position `)[mySim$QTN.position])
(myGAPIT$GWAS$P.value)[mySim$QTN.position]
sort((myGAPIT$GWAS$P.value)[mySim$QTN.position])
median(sort((myGAPIT$GWAS$P.value)[mySim$QTN.position]))
P_thresh = median(sort((myGAPIT$GWAS$P.value)[mySim$QTN.position]))
color.vector <- rep(c("deepskyblue","orange","forestgreen","indianred3"),10)
m=ncol(X)
plot(t(-log10(myGAPIT$GWAS$P.value))~seq(1:m),col=color.vector[myGM[,2]])
length(myGAPIT$P.value)
length(myGAPIT$GWAS$P.value)
m
length(myGAPIT$GWAS$P.value)
m
myGM[,2]
length(myGM[,2])
plot(t(-log10(myGAPIT$GWAS$P.value))~seq(1:m),col=color.vector[myGM[,2]])
plot((-log10(myGAPIT$GWAS$P.value))~seq(1:m),col=color.vector[myGM[,2]])
P_thresh = median(sort((myGAPIT$GWAS$P.value)[mySim$QTN.position]))
color.vector <- rep(c("deepskyblue","orange","forestgreen","indianred3"),10)
m=ncol(X)
plot((-log10(myGAPIT$GWAS$P.value))~seq(1:m),col=color.vector[myGM[,2]])
abline(v=mySim$QTN.position, lty = 2, lwd=1.5, col = "black")
abline(h=log(P_thresh), lty = 2, lwd=1.5, col = "black")
P_thresh = median(sort((myGAPIT$GWAS$P.value)[mySim$QTN.position]))
color.vector <- rep(c("deepskyblue","orange","forestgreen","indianred3"),10)
m=ncol(X)
plot((-log10(myGAPIT$GWAS$P.value))~seq(1:m),col=color.vector[myGM[,2]])
abline(v=mySim$QTN.position, lty = 2, lwd=1.5, col = "black")
abline(h=log(P_thresh), lty = 2, lwd=1.5, col = "black")
P_thresh = median(sort((myGAPIT$GWAS$P.value)[mySim$QTN.position]))
color.vector <- rep(c("deepskyblue","orange","forestgreen","indianred3"),10)
m=ncol(X)
plot((-log10(myGAPIT$GWAS$P.value))~seq(1:m),col=color.vector[myGM[,2]])
abline(v=mySim$QTN.position, lty = 2, lwd=1.5, col = "black")
abline(h=-log10(P_thresh), lty = 2, lwd=1.5, col = "black")
sort(myGAPIT$GWAS$P.value)[1:10]
(myGAPIT$GWAS$P.value) < P_thresh
myGAPIT$GWAS$P.value(myGAPIT$GWAS$P.value) < P_thresh
P.value =myGAPIT$GWAS$P.value
P.value[(P.value) < P_thresh]
X[(P.value) < P_thresh]
[(P.value) < P_thresh]
P.value[(P.value) < P_thresh]
sort(P.value[(P.value) < P_thresh])
h2 = 0.75
NQTN = 30
source("http://zzlab.net/GAPIT/gapit_functions.txt")
library(ggplot2)
library(e1071)
library(BLR)
library(BGLR)
# read SNPs data file
myGD=read.table(file="geno_numeric.txt", head=T, check.names = FALSE)
mySim =GAPIT.Phenotype.Simulation(
GD=myGD,GM=myGM,
h2=h2,NQTN=NQTN,
QTNDist="normal")
setwd("C:/Users/theox/Desktop/Spring-2023/Crop_Sci 545/Homework/4/data")
myGD=read.table(file="geno_numeric.txt", head=T, check.names = FALSE)
setwd("C:/Users/theox/Desktop/StatisticalGenomics/data")
# read SNPs data file
myGD=read.table(file="geno_numeric.txt", head=T, check.names = FALSE)
# Marker postion
myGM=read.table(file="snp_info.txt", head=T, check.names = F)
dim(myGM)
dim(myGD)
mySim =GAPIT.Phenotype.Simulation(
GD=myGD,GM=myGM,
h2=h2,NQTN=NQTN,
QTNDist="normal")
n_row=nrow(myGD) # no. of lines
test=sample(n_row,round(n_row/5),replace=F)
train=-test
X.train  <- myGD[train,] #training genotype
y.train = mySim$Y[train,] # training phenotype
y.test = mySim$Y[test,] #testing phenotype
#dim(y.train);dim(y.test)
# run GWAS using BLINK
gwas_blink <- GAPIT(Y = y.train,
GD = myGD,GM = myGM,PCA.total = 3,
QTN.position=mySim$QTN.position,
model = "BLINK",
file.output = FALSE,
memo = 'GWAS')
myCV=gwas_blink$PCA
index = order(gwas_blink$GWAS$P.value, decreasing = F)
myQTN=cbind(gwas_blink$PCA, myGD[index[1:15]])
#Regression with SVM
df_train = cbind(y.train[2],, myQTN[train,-1])
myCV=gwas_blink$PCA
index = order(gwas_blink$GWAS$P.value, decreasing = F)
myQTN=cbind(gwas_blink$PCA, myGD[index[1:15]])
#Regression with SVM
df_train = cbind(y.train[2],, myQTN[train,-1])
df_train = cbind(y.train[2], myQTN[train,-1])
df_test = cbind(y.test[,2],myCV[test,-1], myGD[test,-1])
#run svm
modelsvm = svm(Sim ~ ., data = df_train)
#Predict using SVM regression
pred_test_svm = predict(modelsvm, newdata = df_test)
#run svm
modelsvm = svm(Sim ~ ., data = df_train)
df_train
#Regression with SVM
dim(df_train)
df_train = cbind(y.train[2], myQTN[train,-1])
#run svm
modelsvm = svm(Sim ~ ., data = df_train)
pred_train_svm = predict(modelsvm, newdata = df_train)
df_train
#run svm
modelsvm = svm(Sim ~ ., data = df_train)
modelsvm
#Predict using SVM regression
pred_test_svm = predict(modelsvm, newdata = df_test)
pred_train_svm = predict(modelsvm, data = df_train)
df_train = cbind(y.train[2],myCV[train,-1], myGD[train,-1])
df_test = cbind(y.test[,2],myCV[test,-1], myGD[test,-1])
#run svm
modelsvm = svm(Sim ~ ., data = df_train)
#Predict using SVM regression
pred_test_svm = predict(modelsvm, newdata = df_test)
